{"home":{"content":"# User Authentication pt 2\n\nWelcome to **Lecture 34**! Here's a brief class breakdown.\n\n## Learning Objectives\n1. Practice debugging complex serverside code faults\n2. Implement basic user authentication with sessions\n\n## To Do Today\n\n### [Warmup](#warmup)\n### [Passpostjs](#passportjs)\n","idx":0},"title":{"content":"User Authentication pt 2","idx":1},"desc":{"content":"Vanilla Use Auth + with passport.js","idx":2},"warmup":{"content":"# Warmup\n\nHere are some basic practice problems.\n\n## Exercise 1\nCreate a new NodeJS project with:\n\n1. Express\n2. Body-parser\n3. Supervisor\n\netc.\n\nCreate a server with express that exposes **one** route:\n\n**GET** /foobar\n\nYour route should do the following:\n\nIf user accesses the route up to 3 times, response with **\"foobar\"**. On the 4th access, respond with a **404**.\n\n## Exercise 2\n\nGit clone **[this repo](https://github.com/mottaquikarim/myplaces_debugging_nycda_solved)**.\n\nCreate a file in **public** called **login.html**.\n\nYour **login.html** should have:\n\n1. **user email** input field\n2. **user password** input field\n\nWire up a **submit** button to make a **POST** request to the **/auth/login** route with the user inputs (the email and password).\n\n**If you want**: create the serverside route logic as well in **authRoutes.js** to handle this.\n\n","idx":3},"passpostjs":{"content":"# PasspostJS\n\n## Resources\n\nHere are some useful resources.\n\n\n1. Simple **[github](https://www.jokecamp.com/tutorial-passportjs-authentication-in-nodejs/)** authentication tutorial.\n\n2. **[Passport docs](http://passportjs.org/docs)**\n","idx":4},"__list__":["home","title","desc","warmup","passpostjs"]}